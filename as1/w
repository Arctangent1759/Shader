#include <GL/glut.h>
#include <GL/glu.h>
#include <vector>
#include <iostream>
#include <fstream>
#include <cmath>
#include <time.h>
#include <math.h>


#define PI 3.14159265  // Should be used from mathlib
inline float sqr(float x) { return x*x; }

using namespace std;

//////////////////////////
//----------------------//
//| :: Vector Utils :: |//
//----------------------//
//////////////////////////

//****************************************************
// Adds vector u and vector v
//***************************************************
vector<double> makeVector(double x, double y, double z){
    vector<double> out(3);
    out[0]=x;
    out[1]=y;
    out[2]=z;
    return out;
}

//****************************************************
// Adds vector u and vector v
//***************************************************
vector<double> operator+(const vector<double>& u, const vector<double>& v){
    vector<double> out(3);
    out[0]=u[0]+v[0];
    out[1]=u[1]+v[1];
    out[2]=u[2]+v[2];
    return out;
}

//****************************************************
// Subtracts vector u and vector v
//***************************************************
vector<double> operator-(const vector<double>& u, const vector<double>& v){
    vector<double> out(3);
    out[0]=u[0]-v[0];
    out[1]=u[1]-v[1];
    out[2]=u[2]-v[2];
    return out;
}

//****************************************************
// Returns the cross product of vector u and vector v
//***************************************************
vector<double> cross(const vector<double>& u, const vector<double>& v){
    vector<double> out(3);
    out[0]=u[1] * v[2] - u[2] * v[1];
    out[1]=u[2] * v[0] - u[0] * v[2];
    out[2]=u[0] * v[1] - u[1] * v[0];
    return out;
}

//****************************************************
// Takes the dot product of vector u and vector v
//***************************************************
double operator*(const vector<double>& u, const vector<double>& v){
    return u[0]*v[0]+u[1]*v[1]+u[2]*v[2];
}

//****************************************************
// Scales vector v by scalar s
//***************************************************
vector<double> operator*(const vector<double>& v, double s){
    vector<double> out(3);
    out[0]=s*v[0];
    out[1]=s*v[1];
    out[2]=s*v[2];
    return out;
}

//****************************************************
// Scales vector v by scalar s
//***************************************************
vector<double> operator*(double s, const vector<double>& v){
    return v*s;
}
vector<double> operator/(const vector<double>& v, double s){
    return v*(1.0/s);
}

//****************************************************
// Elementwise multiplication of vectors u and v
//***************************************************
vector<double> mult(vector<double> u, vector<double> v){
    vector<double> out(3);
    out[0]=u[0]*v[0];
    out[1]=u[1]*v[1];
    out[2]=u[2]*v[2];
    return out;
}

//****************************************************
// Takes the squared norm of vector v
//***************************************************
double normSq(const vector<double> v){
    return v*v;
}

//****************************************************
// Takes the norm of vector v
//***************************************************
double norm(const vector<double> v){
    return sqrt(normSq(v));
}

//****************************************************
// Normalizes vector v
//***************************************************
vector<double> normalize(const vector<double> v){
    return v/norm(v);
}

//****************************************************
// Projects vector u into vector v
//***************************************************
vector<double> project(const vector<double>& u, const vector<double>& v){
    return (((u)*(v))/normSq(v))*v;
}

//****************************************************
// Takes the perpendicular component of vector u on
// vector v.
//***************************************************
vector<double> perp(const vector<double>& u, const vector<double>& v){
    return u-project(u,v);
}



/////////////////////
//-----------------//
//| :: Classes :: |//
//-----------------//
/////////////////////

class Viewport;

class Viewport {
    public:
        int w, h; // width and height
};

class Light{
    public:
        Light(double x, double y, double z, vector<double> cl){
            vector<double> pos(3);
            pos[0]=x;
            pos[1]=y;
            pos[2]=z;
            this->pos = normalize(pos);
            this->cl = cl;
        }
        vector<double> pos;
        vector<double> cl;
};

typedef vector<double>(ColorFn)(double s, double t);

//****************************************************
// Global Variables
//****************************************************
Viewport	viewport;

//****************************************************
// Simple init function
//****************************************************
void initScene(){
    // Nothing to do here for this simple example.

}


//****************************************************
// reshape viewport if the window is resized
//****************************************************
void myReshape(int w, int h) {
    viewport.w = w;
    viewport.h = h;

    glViewport (0,0,viewport.w,viewport.h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0, viewport.w, 0, viewport.h);
}


/////////////////////////////////
//-----------------------------//
//| :: Rendering Functions :: |//
//-----------------------------//
/////////////////////////////////

#include <complex>
double mandelCheck( double x, double y, int n, double threshold){
    complex<double> cOffset(x*2,y*2);
    complex<double> z(0.0,0.0);
    int i;
    for (i = 0; abs(z) < threshold && i < n; i++){
        z=z*z+cOffset;
    }
    return (double)(i)/n;
}
vector<double> mandelTexture(double s, double t){
    static vector<double> c1 = makeVector(1.0,0.0,0.0);
    static vector<double> c2 = makeVector(0.0,0.0,0.0);
    double a = mandelCheck(s,t,18,2.0);
    return a*c1+(1.0-a)*c2;
}
vector<double> tigerTexture(double s, double t){
    static vector<double> c1 = makeVector(0.0,0.0,0.0);
    static vector<double> c2 = makeVector(1.0,0.2,0.0);
    return (int)round(100*((s-t)*(s+t)))%2==0?c1:c2;
}
vector<double> red(double s, double t){return makeVector(1.0,0.0,0.0);}
vector<double> green(double s, double t){return makeVector(0.0,1.0,0.0);}
vector<double> blue(double s, double t){return makeVector(0.0,0.0,1.0);}
vector<double> white(double s, double t){return makeVector(1.0,1.0,1.0);}

//****************************************************
// Renders a sphere
//***************************************************
void sphere(float centerX, float centerY, float radius, ColorFn cr, vector<double> cp, double p, vector<double> ca, vector<Light> lights){
    glBegin(GL_POINTS);

    int minI = max(0,(int)floor(centerX-radius));
    int maxI = min(viewport.w-1,(int)ceil(centerX+radius));

    int minJ = max(0,(int)floor(centerY-radius));
    int maxJ = min(viewport.h-1,(int)ceil(centerY+radius));

    vector<double> n(3), r(3);
    vector<double> e = makeVector(0,0,1);

    for (int i=0;i<viewport.w;i++) {
        for (int j=0;j<viewport.h;j++) {
            double x = (i+0.5-centerX);
            double y = (j+0.5-centerY);
            double distSq = x*x + y*y;
            if (distSq<=radius*radius) {
                double z = sqrt(radius*radius-distSq);
                double t = atan(y/sqrt(x*x+z*z))/PI;
                double s = atan(x/z)/(PI);
                n = normalize(makeVector(x,y,z));
                vector<double> clr = mult(cr(s,t),ca);
                for (vector<Light>::iterator light = lights.begin(); light != lights.end(); light++){
                    r=2*(light->pos*n)*n-light->pos;
                    clr = clr + mult(light->cl,light->cl*max(0.0,n*light->pos))+mult(light->cl,cp)*pow(max(0.0,e*r),p);
                }
                glColor3f(clr[0], clr[1], clr[2]);
                glVertex2f(i + 0.5, j + 0.5);
            }


        }
    }
    glEnd();
}


//****************************************************
// function that does the actual drawing of stuff
//***************************************************
void myDisplay() {
    glClear(GL_COLOR_BUFFER_BIT);				// clear the color buffer
    glMatrixMode(GL_MODELVIEW);			        // indicate we are specifying camera transformations
    glLoadIdentity();				        // make sure transformation is "zero'd"

    vector<Light> lights;

    vector<double> ca = makeVector(.15, .15, .15); //color of ambient light
    vector<double> cl = makeVector(.85, .85, .85); //color of light source
    vector<double> cp = makeVector(.7, .7, .7); //specular reflectance

    lights.push_back(Light(1,1,1,cl));

    sphere(viewport.w/2.0 , viewport.h/2.0 , min(viewport.w,viewport.h)/4.0, tigerTexture, cp, 16.0, ca, lights);


    glFlush();
    glutSwapBuffers();					// swap buffers (we earlier set double buffer)
}



//****************************************************
// the usual stuff, nothing exciting here
//****************************************************
int main(int argc, char *argv[]) {
    //This initializes glut
    glutInit(&argc, argv);

    //This tells glut to use a double-buffered window with red, green, and blue channels 
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);

    // Initalize theviewport size
    viewport.w = 400;
    viewport.h = 400;

    //The size and position of the window
    glutInitWindowSize(viewport.w, viewport.h);
    glutInitWindowPosition(0,0);
    glutCreateWindow(argv[0]);

    initScene();							// quick function to set up scene

    glutDisplayFunc(myDisplay);				// function to run when its time to draw something
    glutReshapeFunc(myReshape);				// function to run when the window gets resized

    glutMainLoop();							// infinite loop that will keep drawing and resizing
    // and whatever else

    return 0;
}








